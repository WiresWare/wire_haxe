// Generated by Haxe 4.1.2
(function ($hx_exports, $global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Scope = function() {
};
Scope.__name__ = true;
Scope.prototype = {
	__class__: Scope
};
var TestWireMiddleware = function() {
};
TestWireMiddleware.__name__ = true;
TestWireMiddleware.prototype = {
	onAdd: function(wire) {
		console.log("src/Main.hx:14:","> TestWireMiddleware -> onAdd: Wire.signal = " + wire.get_signal());
	}
	,onData: function(key,prevValue,nextValue) {
		console.log("src/Main.hx:18:","> TestWireMiddleware -> onData: key = " + key + " | " + Std.string(prevValue) + " | " + Std.string(nextValue));
	}
	,onRemove: function(signal,scope,listener) {
		console.log("src/Main.hx:22:","> TestWireMiddleware -> onRemove: signal = " + signal + " | " + Std.string(scope) + " | " + Std.string(listener));
	}
	,onSend: function(signal,data) {
		console.log("src/Main.hx:26:","> TestWireMiddleware -> onRemove: signal = " + signal + " | " + Std.string(data));
	}
	,__class__: TestWireMiddleware
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	console.log("src/Main.hx:32:","Welcome Wire");
	var SCOPE = new Scope();
	Wire.middleware(new TestWireMiddleware());
	console.log("src/Main.hx:44:","\n=============== SUBSCRIBER and API EXAMPLE ===============");
	Wire.add(SCOPE,"SIGNAL_1",function(wire,data) {
		console.log("src/Main.hx:46:","> SIGNAL 1 (subscriber 1) -> Hello: " + Std.string(data));
	});
	var listener1 = function(wire,data) {
		console.log("src/Main.hx:50:","> SIGNAL 1 (subscriber 2) -> Hello: " + Std.string(data));
	};
	Wire.add(SCOPE,"SIGNAL_1",listener1);
	Wire.send("SIGNAL_1","World");
	Wire.send("SIGNAL_1","Haxe");
	Wire.send("SIGNAL_1","Programming");
	Wire.remove("SIGNAL_1");
	console.log("src/Main.hx:63:","\n=============== REMOVE EXAMPLE ===============");
	var listener2 = function(wire,data) {
		console.log("src/Main.hx:65:","> Remove: SIGNAL (listener 2) -> data: " + Std.string(data));
	};
	var SCOPE_2 = new Scope();
	Wire.add(SCOPE,"SIGNAL_3",listener2);
	Wire.add(SCOPE,"SIGNAL_4",listener2);
	Wire.add(SCOPE_2,"SIGNAL_3",listener2);
	Wire.add(SCOPE_2,"SIGNAL_4",function(wire,data) {
		console.log("src/Main.hx:74:","> Remove: SIGNAL 2 -> data: " + Std.string(data));
	});
	Wire.remove("SIGNAL_3",null,listener2);
	Wire.remove("SIGNAL_3",SCOPE_2);
	Wire.send("SIGNAL_3","SIGNAL_3");
	Wire.send("SIGNAL_4","SIGNAL_4");
	Wire.remove("SIGNAL_1",SCOPE);
	Wire.remove("SIGNAL_2",SCOPE_2);
	console.log("src/Main.hx:86:","\n=============== ONCE EXAMPLE on WireListener ===============");
	Wire.add(SCOPE,"SIGNAL_1_ONCE",function(wire,data) {
		console.log("src/Main.hx:88:","> SIGNAL 1 (limit 1) -> Goodbye: " + Std.string(data));
	},1);
	console.log("src/Main.hx:91:","\tNo ends: " + Std.string(Wire.send("SIGNAL_1_ONCE","World")));
	console.log("src/Main.hx:92:","\tNo ends: " + Std.string(Wire.send("SIGNAL_1_ONCE","Haxe")));
	console.log("src/Main.hx:93:","\tNo ends: " + Std.string(Wire.send("SIGNAL_1_ONCE","Programming")));
	console.log("src/Main.hx:96:","\n=============== 2 REPLY on WireListener ===============");
	Wire.add(SCOPE,"SIGNAL_2",function(wire,data) {
		console.log("src/Main.hx:98:","\t SIGNAL 2 -> I do: " + Std.string(data));
	});
	Wire.add(SCOPE,"SIGNAL_2",function(wire,data) {
		console.log("src/Main.hx:102:","\t SIGNAL 2 (limit 2) -> I do: " + Std.string(data));
	},2);
	console.log("src/Main.hx:105:","Sent -> is last: " + Std.string(Wire.send("SIGNAL_2","Code")));
	console.log("src/Main.hx:106:","Sent -> is last: " + Std.string(Wire.send("SIGNAL_2","Gym")));
	console.log("src/Main.hx:107:","Sent -> is last: " + Std.string(Wire.send("SIGNAL_2","Eat")));
	console.log("src/Main.hx:108:","Sent -> is last: " + Std.string(Wire.send("SIGNAL_2","Sleep")));
	console.log("src/Main.hx:109:","Sent -> is last: " + Std.string(Wire.send("SIGNAL_2","Repeat")));
	console.log("src/Main.hx:113:","\n=============== DATA TESTS ===============");
	var dataListener1 = function(data) {
		console.log("src/Main.hx:116:","\t Listener 1 NEVER -> " + data);
	};
	Wire.data("SUPER_PARAM").subscribe(dataListener1);
	console.log("src/Main.hx:119:","=============== Listener 1 subscibed: hasListener = " + Std.string(Wire.data("SUPER_PARAM").hasListener(dataListener1)));
	Wire.data("SUPER_PARAM").unsubscribe(dataListener1);
	console.log("src/Main.hx:121:","=============== Listener 1 unsubscibed: hasListener = " + Std.string(Wire.data("SUPER_PARAM").hasListener(dataListener1)));
	var dataListener2 = function(data) {
		console.log("src/Main.hx:124:","\t Listener ONCE AND UNSUBSCRIBE -> " + data);
	};
	Wire.data("SUPER_PARAM").subscribe(dataListener2);
	Wire.data("SUPER_PARAM").subscribe(function(data) {
		console.log("src/Main.hx:127:","\t Listener ALL CASES -> " + data);
	});
	console.log("src/Main.hx:129:","> Wire.data Listeners: where initial data = " + Std.string(Wire.data("SUPER_PARAM").get_value()));
	Wire.data("SUPER_PARAM","Set VALUE to key1: " + "SUPER_PARAM");
	Wire.data("SUPER_PARAM").unsubscribe(dataListener2);
	Wire.data("SUPER_PARAM",function(value) {
		return value + " | APPENDED from function call";
	});
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var ValueType = $hxEnums["ValueType"] = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
var Type = function() { };
Type.__name__ = true;
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var wire_WireLayer = function() {
	this._hashesBySignal = new haxe_ds_StringMap();
	this._wireByHash = new haxe_ds_IntMap();
};
wire_WireLayer.__name__ = true;
wire_WireLayer.prototype = {
	add: function(wire) {
		var hash = wire.get_hash();
		var signal = wire.get_signal();
		if(this._wireByHash.h.hasOwnProperty(hash)) {
			throw haxe_Exception.thrown(wire_WireConstant.ERROR__WIRE_ALREADY_REGISTERED + (hash == null ? "null" : "" + hash));
		}
		this._wireByHash.h[hash] = wire;
		if(!Object.prototype.hasOwnProperty.call(this._hashesBySignal.h,signal)) {
			var this1 = this._hashesBySignal;
			var v = [];
			this1.h[signal] = v;
		}
		this._hashesBySignal.h[signal].push(hash);
		return wire;
	}
	,hasSignal: function(signal) {
		return Object.prototype.hasOwnProperty.call(this._hashesBySignal.h,signal);
	}
	,hasWire: function(wire) {
		var this1 = this._wireByHash;
		var key = wire.get_hash();
		return this1.h.hasOwnProperty(key);
	}
	,send: function(signal,data) {
		var noMoreSubscribers = true;
		if(this.hasSignal(signal)) {
			var WiresToRemove = [];
			var _g = 0;
			var _g1 = this._hashesBySignal.h[signal];
			while(_g < _g1.length) {
				var hash = _g1[_g];
				++_g;
				var wire = this._wireByHash.h[hash];
				var replies = wire.replies;
				noMoreSubscribers = replies > 0 && --replies == 0;
				if(noMoreSubscribers) {
					WiresToRemove.push(wire);
				}
				wire.replies = replies;
				wire.transfer(data);
			}
			var _g = 0;
			while(_g < WiresToRemove.length) {
				var wire = WiresToRemove[_g];
				++_g;
				noMoreSubscribers = this._removeWire(wire);
			}
		}
		return noMoreSubscribers;
	}
	,remove: function(signal,scope,listener) {
		var exists = this.hasSignal(signal);
		if(exists) {
			var wiresToRemove = [];
			var _g = 0;
			var _g1 = this._hashesBySignal.h[signal];
			while(_g < _g1.length) {
				var hash = _g1[_g];
				++_g;
				var wire = this._wireByHash.h[hash];
				var isWrongScope = scope != null && scope != wire.get_scope();
				var isWrongListener = listener != null && listener != wire.get_listener();
				if(isWrongScope || isWrongListener) {
					return false;
				}
				wiresToRemove.push(wire);
			}
			var _g = 0;
			while(_g < wiresToRemove.length) {
				var wire = wiresToRemove[_g];
				++_g;
				this._removeWire(wire);
			}
		}
		return exists;
	}
	,clear: function() {
		var wireToRemove = [];
		var hash = this._wireByHash.keys();
		while(hash.hasNext()) {
			var hash1 = hash.next();
			wireToRemove.push(this._wireByHash.h[hash1]);
		}
		var _g = 0;
		while(_g < wireToRemove.length) {
			var wire = wireToRemove[_g];
			++_g;
			this._removeWire(wire);
		}
	}
	,_removeWire: function(wire) {
		var hash = wire.get_hash();
		var signal = wire.get_signal();
		this._wireByHash.remove(hash);
		var hashesForSignal = this._hashesBySignal.h[signal];
		HxOverrides.remove(hashesForSignal,hash);
		var noMoreSignals = hashesForSignal.length == 0;
		if(noMoreSignals) {
			var _this = this._hashesBySignal;
			if(Object.prototype.hasOwnProperty.call(_this.h,signal)) {
				delete(_this.h[signal]);
			}
		}
		wire.clear();
		return noMoreSignals;
	}
	,getBySignal: function(signal) {
		var _gthis = this;
		if(this.hasSignal(signal)) {
			var _this = this._hashesBySignal.h[signal];
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = _gthis._wireByHash.h[_this[i]];
			}
			return result;
		} else {
			return [];
		}
	}
	,getByScope: function(scope) {
		var result = [];
		var hash = this._wireByHash.keys();
		while(hash.hasNext()) {
			var hash1 = hash.next();
			var wire = this._wireByHash.h[hash1];
			if(wire.get_scope() == scope) {
				result.push(wire);
			}
		}
		return result;
	}
	,getByListener: function(listener) {
		var result = [];
		var hash = this._wireByHash.keys();
		while(hash.hasNext()) {
			var hash1 = hash.next();
			var wire = this._wireByHash.h[hash1];
			if(wire.get_listener() == listener) {
				result.push(wire);
			}
		}
		return result;
	}
	,__class__: wire_WireLayer
};
var wire_WireStore = function() {
	this._map = new haxe_ds_StringMap();
};
wire_WireStore.__name__ = true;
wire_WireStore.prototype = {
	get: function(key) {
		if(!Object.prototype.hasOwnProperty.call(this._map.h,key)) {
			var _e = this._map;
			var v = new wire_WireData(key,function(key) {
				if(Object.prototype.hasOwnProperty.call(_e.h,key)) {
					delete(_e.h[key]);
					return true;
				} else {
					return false;
				}
			});
			this._map.h[key] = v;
		}
		return this._map.h[key];
	}
	,clear: function() {
		var key = haxe_ds_StringMap.keysIterator(this._map.h);
		while(key.hasNext()) {
			var key1 = key.next();
			this._map.h[key1].remove();
			var _this = this._map;
			if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
				delete(_this.h[key1]);
			}
		}
	}
	,__class__: wire_WireStore
};
var Wire = $hx_exports["Wire"] = function(scope,signal,listener,replies) {
	if(replies == null) {
		replies = 0;
	}
	this.replies = 0;
	this._scope = scope;
	this._signal = signal;
	this._listener = listener;
	this.replies = replies;
	this._hash = ++Wire._INDEX;
};
Wire.__name__ = true;
Wire.attach = function(wire) {
	Wire._LAYER.add(wire);
};
Wire.detach = function(wire) {
	return Wire._LAYER.remove(wire.get_signal(),wire.get_scope(),wire.get_listener());
};
Wire.add = function(scope,signal,listener,replies) {
	if(replies == null) {
		replies = 0;
	}
	var wire = new Wire(scope,signal,listener,replies);
	var _g = 0;
	var _g1 = Wire._MIDDLEWARES;
	while(_g < _g1.length) {
		var m = _g1[_g];
		++_g;
		m.onAdd(wire);
	}
	Wire.attach(wire);
	return wire;
};
Wire.has = function(signal,wire) {
	if(signal != null) {
		return Wire._LAYER.hasSignal(signal);
	}
	if(wire != null) {
		return Wire._LAYER.hasWire(wire);
	}
	return false;
};
Wire.send = function(signal,data) {
	var _g = 0;
	var _g1 = Wire._MIDDLEWARES;
	while(_g < _g1.length) {
		var m = _g1[_g];
		++_g;
		m.onSend(signal,data);
	}
	return Wire._LAYER.send(signal,data);
};
Wire.purge = function(withMiddleware) {
	if(withMiddleware == null) {
		withMiddleware = false;
	}
	Wire._LAYER.clear();
	Wire._STORE.clear();
	if(withMiddleware) {
		while(Wire._MIDDLEWARES.length > 0) Wire._MIDDLEWARES.pop();
	}
};
Wire.remove = function(signal,scope,listener) {
	var existed = Wire._LAYER.remove(signal,scope,listener);
	if(existed) {
		var _g = 0;
		var _g1 = Wire._MIDDLEWARES;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			m.onRemove(signal,scope,listener);
		}
	}
	return existed;
};
Wire.middleware = function(value) {
	if(Wire._MIDDLEWARES.indexOf(value) < 0) {
		Wire._MIDDLEWARES.push(value);
	} else {
		throw haxe_Exception.thrown(wire_WireConstant.ERROR__MIDDLEWARE_EXISTS + Std.string(value));
	}
};
Wire.get = function(signal,scope,listener) {
	var result = [];
	if(signal != null && scope == null && listener == null) {
		result = result.concat(Wire._LAYER.getBySignal(signal));
	}
	if(signal == null && scope != null && listener == null) {
		result = result.concat(Wire._LAYER.getByScope(scope));
	}
	if(signal == null && scope == null && listener != null) {
		result = result.concat(Wire._LAYER.getByListener(listener));
	}
	return result;
};
Wire.data = function(key,value) {
	var wireData = Wire._STORE.get(key);
	if(value != null) {
		var prevValue = wireData.get_value();
		var nextValue = Type.typeof(value) == ValueType.TFunction ? value(prevValue) : value;
		var _g = 0;
		var _g1 = Wire._MIDDLEWARES;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			m.onData(key,prevValue,nextValue);
		}
		wireData.set_value(nextValue);
	}
	return wireData;
};
Wire.prototype = {
	get_signal: function() {
		return this._signal;
	}
	,get_listener: function() {
		return this._listener;
	}
	,get_hash: function() {
		return this._hash;
	}
	,get_scope: function() {
		return this._scope;
	}
	,transfer: function(data) {
		this._listener(this,data);
	}
	,clear: function() {
		this._scope = null;
		this._signal = null;
		this._listener = null;
	}
	,__class__: Wire
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	__class__: haxe_ValueException
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.prototype = {
	remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(key | 0);
		return new haxe_iterators_ArrayIterator(a);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.keysIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return keys[idx - 1];
	}};
};
haxe_ds_StringMap.prototype = {
	__class__: haxe_ds_StringMap
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var wire_WireConstant = function() { };
wire_WireConstant.__name__ = true;
var wire_WireData = function(key,onRemove) {
	this._isSet = false;
	this._listeners = [];
	this._key = key;
	this._onRemove = onRemove;
};
wire_WireData.__name__ = true;
wire_WireData.prototype = {
	get_isSet: function() {
		return this._isSet;
	}
	,get_key: function() {
		return this._key;
	}
	,get_value: function() {
		return this._value;
	}
	,set_value: function(input) {
		this._value = input;
		this._isSet = true;
		this.refresh();
		return this._value;
	}
	,refresh: function() {
		var _g = 0;
		var _g1 = this._listeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(this._value);
		}
	}
	,remove: function() {
		this._onRemove(this._key);
		this._onRemove = null;
		this._key = null;
		this.set_value(null);
		while(this._listeners.length > 0) this._listeners.pop();
	}
	,subscribe: function(listener) {
		if(!this.hasListener(listener)) {
			this._listeners.push(listener);
		}
		return this;
	}
	,unsubscribe: function(listener) {
		if(this.hasListener(listener)) {
			HxOverrides.remove(this._listeners,listener);
		}
		return this;
	}
	,hasListener: function(listener) {
		return this._listeners.indexOf(listener) >= 0;
	}
	,__class__: wire_WireData
};
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
Wire._INDEX = 0;
Wire._LAYER = new wire_WireLayer();
Wire._STORE = new wire_WireStore();
Wire._MIDDLEWARES = [];
wire_WireConstant.ERROR__MIDDLEWARE_EXISTS = "Middleware already registered, middleware: ";
wire_WireConstant.ERROR__WIRE_ALREADY_REGISTERED = "Wire already registered, hash: ";
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=index.js.map